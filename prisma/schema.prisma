generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id_user      String       @id @db.Char(36)
  role_user    users_role_user
  username     String       @unique(map: "username") @db.VarChar(50)
  password     String       @db.VarChar(255)

  // --- kolom reset password yang lebih aman ---
  reset_password          String?   @db.VarChar(255)   // simpan HASH OTP (bcrypt), bukan 6 digit
  reset_password_expires  DateTime?                     // kapan OTP kadaluarsa
  reset_password_attempts Int       @default(0)         // jumlah percobaan

  created_at   DateTime     @default(now()) @db.Timestamp(0)
  updated_at   DateTime     @default(now()) @updatedAt @db.Timestamp(0)

  profile_user profile_user?
  PaymentProofs paymentproofs[]
  // back-relation: invoices yang dibuat oleh user ini
  createdInvoices invoices[] @relation("InvoiceCreatedBy")
  
  // ðŸ‘‰ Tambahan index untuk pencarian cepat berdasarkan role
  @@index([role_user], map: "users_role_idx")
}

model profile_user {
  id_user       String   @id @db.Char(36) // PK + FK ke users
  profile_image String?  @db.Text
  user_name     String   @db.VarChar(100)
  email_user    String?  @db.VarChar(100)
  user_contact  String?  @db.VarChar(20)
  user_address  String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamp(0)

  user users @relation(fields: [id_user], references: [id_user], onDelete: Cascade, map: "fk_user_profile")

  // ðŸ‘‰ Tambahan index untuk pencarian by email (reset password / login)
  @@index([email_user], map: "profile_user_email_idx")
}


model companies {
  company_id          String              @id @db.Char(36)
  business_name       String              @db.VarChar(255)
  company_name        String              @db.VarChar(255)
  company_email       String?             @db.VarChar(255)
  company_contact     String?             @db.VarChar(20)
  company_web         String?             @db.VarChar(255)
  company_registration String?            @db.VarChar(50)
  company_wa          String?             @db.VarChar(20)
  company_ig          String?             @db.VarChar(50)
  company_yt          String?             @db.VarChar(50)
  company_tt          String?             @db.VarChar(50)
  created_at          DateTime            @default(now()) @db.Timestamp(0)
  updated_at          DateTime            @default(now()) @updatedAt @db.Timestamp(0)

  // âœ… Relasi ke company_addresses,, di database ga ada tabel ini... ini virtual field yang dibuat prisma supaya bisa relasi one-to-many
  addresses           company_addresses[]

  tac tac[]

  // Relasi 1:N ke invoice_template
  invoice_templates invoice_template[]
}

model company_addresses {
  address_id      String   @id @default(dbgenerated("(uuid())")) @db.Char(36)
  company_id      String   @db.Char(36)
  address_type    AddressType
  company_address String   @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(0)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamp(0)

  // âœ… Relasi balik ke companies
  company companies @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@index([company_id])
}
model tac {
  tac_id        String   @id @default(uuid()) @db.Char(36)
  company_id    String   @db.Char(36)
  tac_description String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt @db.Timestamp(0)

  company companies @relation(fields: [company_id], references: [company_id])
}

model bank {
  bank_id            String   @id @default(uuid()) @db.Char(36)
  bank_name          String   @db.VarChar(255)
  bank_address       String?  @db.VarChar(255)
  account_number     String   @unique @db.VarChar(50)
  beneficiary_name   String   @db.VarChar(255)
  beneficiary_address String? @db.VarChar(255)
  swift_code         String?  @db.VarChar(20)
  created_at         DateTime @default(now()) @db.Timestamp(0)
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model customer {
  customer_id      String   @id @default(uuid()) @db.Char(36)
  customer_name    String   @db.VarChar(255)
  email            String?  @unique @db.VarChar(255)
  customer_contact String?  @db.VarChar(20)
  customer_address String?  @db.VarChar(255)
  created_at       DateTime @default(now()) @db.Timestamp(0)
  updated_at       DateTime @updatedAt @db.Timestamp(0)
}

model categories {
  category_id          String    @id @default(uuid()) @db.Char(36)
  category_name        String    @db.VarChar(255)
  category_description String?   @db.Text
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt @db.Timestamp(0)

  products             product[]
}

// Template tampilan invoice per perusahaan
model invoice_template {
  template_id    String               @id @default(uuid()) @db.Char(36)
  company_id     String               @db.Char(36)
  template_name  InvoiceTemplateName
  image_logo     String?              @db.LongText
  background     String?              @db.LongText
  header_client  String?              @db.LongText
  footer_client  String?              @db.LongText
  header_partner String?              @db.LongText
  footer_partner String?              @db.LongText
  created_at     DateTime             @default(now()) @db.Timestamp(0)
  updated_at     DateTime             @default(now()) @updatedAt @db.Timestamp(0)

  // Relasi ke companies
  company companies @relation(fields: [company_id], references: [company_id], onDelete: Cascade)

  @@index([company_id])
}

enum InvoiceTemplateName {
  Pelanggan
  Kerjasama
}

model product {
  product_id          String     @id @default(uuid()) @db.Char(36)
  category_id         String?    @db.Char(36)
  product_title       String     @db.VarChar(255)
  product_description String?    @db.Text
  product_amount      Int
  item_type           ProductItemType
  type_status         ProductTypeStatus
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt @db.Timestamp(0)

  category categories? @relation(fields: [category_id], references: [category_id])

  productdetail productdetail[]
}


model events {
  event_id          String   @id @default(uuid()) @db.Char(36)
  event_name        String   @db.VarChar(255)
  event_description String?  @db.Text
  event_venue       String?  @db.VarChar(255)
  event_address     String?  @db.VarChar(255)
  event_date        DateTime @db.DateTime
  event_cost        Int?
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @updatedAt @db.Timestamp(0)

  EventDetail eventdetail[]
}

model invoices {
  invoice_id                  String   @id @default(uuid()) @db.Char(36)
  invoice_number              String   @unique @db.VarChar(20)
  invoice_type                InvoiceType
  customer_name               String   @db.VarChar(255)
  customer_address            String?  @db.VarChar(255)
  unpaid                      Decimal? @db.Decimal(10, 2)
  total_amount                Decimal  @db.Decimal(10, 2)
  // subtotal sebelum diskon invoice (setelah diskon per-item)
  subtotal_before_invoice_discount Decimal @default(0) @db.Decimal(10, 2)
  // jenis & nilai diskon invoice (opsional)
  invoice_discount_type       DiscountType?
  invoice_discount_value      Decimal? @db.Decimal(10, 2)
  // nilai potongan invoice dan subtotal setelah diskon invoice
  invoice_discount_amount     Decimal @default(0) @db.Decimal(10, 2)
  subtotal_after_invoice_discount Decimal @default(0) @db.Decimal(10, 2)
  payment_status              PaymentStatus
  invoice_creation_date       DateTime @db.DateTime
  payment_date                DateTime? @db.DateTime
  completion_date             DateTime? @db.DateTime
  due_date                    DateTime? @db.DateTime
  currency_accepted           String   @db.VarChar(10)
  currency_exchange_rate      Decimal? @db.Decimal(10, 4)
  currency_exchange_rate_date DateTime? @db.DateTime
  pdf_path                    String?  @db.LongText
  // menandai pengguna pembuat invoice; optional untuk kompatibilitas data lama
  created_by_user_id          String?  @db.Char(36)
  created_at                  DateTime @default(now()) @db.Timestamp(0)
  updated_at                  DateTime @updatedAt @db.Timestamp(0)

  ProductDetail productdetail[]

  EventDetail eventdetail[]

  PaymentProofs paymentproofs[]

  barcodes barcodes[]

  // relasi ke users untuk creator
  createdBy users? @relation("InvoiceCreatedBy", fields: [created_by_user_id], references: [id_user], map: "fk_invoices_created_by")

  @@index([created_by_user_id], map: "invoices_created_by_idx")
}

model productdetail {
  product_detail_id    String   @id @default(uuid()) @db.Char(36)
  invoice_id           String   @db.Char(36)
  product_id           String   @db.Char(36)
  quantity             Int
  // total setelah diskon per-item (dipertahankan kompatibel)
  total_product_amount Decimal  @db.Decimal(10, 2)
  // informasi diskon per-item (opsional)
  discount_type              DiscountType?
  discount_value             Decimal? @db.Decimal(10, 2)
  // nilai sebelum diskon & potongan pada level item
  line_total_before_discount Decimal  @default(0) @db.Decimal(10, 2)
  line_discount_amount       Decimal  @default(0) @db.Decimal(10, 2)
  created_at           DateTime @default(now()) @db.Timestamp(0)
  updated_at           DateTime @updatedAt @db.Timestamp(0)

  //  gunakan nama model persis seperti yang ada
  invoice invoices @relation(fields: [invoice_id], references: [invoice_id], onDelete: Cascade)
  product product  @relation(fields: [product_id], references: [product_id], onDelete: Restrict)

  @@unique([invoice_id, product_id])
  @@map("product_detail")
}

model eventdetail {
  event_detail_id   String   @id @default(uuid()) @db.Char(36)
  invoice_id        String   @db.Char(36)
  event_id          String   @db.Char(36)
  quantity          Int
  total_event_cost  Decimal  @db.Decimal(10, 2)
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @updatedAt @db.Timestamp(0)

  // âœ… Relasi
  invoice invoices @relation(fields: [invoice_id], references: [invoice_id])
  event   events   @relation(fields: [event_id], references: [event_id])

  @@unique([invoice_id, event_id])
  @@map("event_detail")
}

model paymentproofs {
  payment_proof_id     String   @id @default(uuid()) @db.Char(36)
  invoice_id           String   @db.Char(36)
  proof_status         ProofStatus
  proof_image_path     String   @db.Text
  proof_title          String?  @db.VarChar(255)
  proof_description    String?  @db.Text
  proof_amount         Decimal  @db.Decimal(10, 2)
  uploaded_by_user_id  String   @db.Char(36)
  created_at           DateTime @default(now()) @db.Timestamp(0)
  updated_at           DateTime @updatedAt @db.Timestamp(0)

  // âœ… Relasi
  invoice    invoices @relation(fields: [invoice_id], references: [invoice_id])
  uploadedBy users    @relation(fields: [uploaded_by_user_id], references: [id_user])

  @@map("payment_proofs")
}

model barcodes {
  barcode_id        String   @id @default(uuid()) @db.Char(36)
  invoice_id        String   @unique @db.Char(36)
  document_type     DocumentType
  barcode_link      String   @db.Text
  barcode_image_path String  @db.Text
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @updatedAt @db.Timestamp(0)

  // âœ… Relasi
  invoice invoices @relation(fields: [invoice_id], references: [invoice_id])

  @@map("barcodes")
}

enum DocumentType {
  Invoice
  Receipt
}

enum ProofStatus {
  Pending
  Verified
  Rejected
}

enum InvoiceType {
  Pelanggan
  Kerjasama
}

enum PaymentStatus {
  Belum_dibayar
  Lunas
  Mencicil
  Jatuh_tempo
}

enum ProductTypeStatus {
  tetap
  tidak_tetap
}

enum ProductItemType {
  product
  service
}

enum AddressType {
  Head_Office
  Branch_Office
  Warehouse
}

enum users_role_user {
  admin
  konsultan
}

// Jenis diskon yang didukung
enum DiscountType {
  PERCENT
  FIXED
}
